#include <stdint.h>
#include "hookapi.h"

int64_t hook(uint32_t reserved)
{
    uint8_t hook_accid[20];
    if (hook_account(SBUF(hook_accid)) < 0)
        rollback(SBUF("Doubler: Could not fetch hook account id."), 1);

    uint8_t account_field[20];
    int32_t account_field_len = otxn_field(SBUF(account_field), sfAccount);

    // compare the "From Account" (sfAccount) on the transaction with the account the hook is running on
    int equal = 0; BUFFER_EQUAL(equal, hook_accid, account_field, 20);
    if (equal)
    {
        accept(SBUF("Doubler: Outgoing transaction. Passing."), 2);
        return 0;
    }

    uint8_t digest[96];
    if (ledger_last_hash(digest, 32) != 32)
        rollback(SBUF("Doubler: Failed to fetch last closed ledger."), 3);
    
    uint8_t key[32];
    state(digest + 32, 32, SBUF(key));
    etxn_nonce(digest + 64, 32);

    uint8_t hash[32];
    if (util_sha512h(SBUF(hash), SBUF(digest)) != 32)
        rollback(SBUF("Doubler: Could not compute digest for coin flip."), 4);

    if (state_set(SBUF(hash), SBUF(key)) != 32)
        rollback(SBUF("Doubler: Could not set state."), 5);

    if (hash[0] % 10 > 5) { // win - double the XAH
        etxn_reserve(1);
        unsigned char amount_buffer[8];
        int64_t amount_len = otxn_field(SBUF(amount_buffer), sfAmount);
        int64_t drops_to_send = (int64_t)(AMOUNT_TO_DROPS(amount_buffer) * 2); // doubler pays back 2x received
        if ((int64_t)(AMOUNT_TO_DROPS(amount_buffer)) > 1000000) {
            rollback(SBUF("Doubler: Ammount not allowed."), 6);
        }

        unsigned char tx[PREPARE_PAYMENT_SIMPLE_SIZE];
        
        PREPARE_PAYMENT_SIMPLE(tx, drops_to_send, account_field, 0, 0);
        
        // emit the transaction
        uint8_t tx_res[32];
        int64_t emit_result = emit(SBUF(tx_res), SBUF(tx));
        TRACEVAR(emit_result);
        // accept and allow the original transaction through
        accept(SBUF("Doubler: You won! Funds emitted!"), 0);
    }
    else {
        accept(SBUF("Doubler: You lose. Better luck next time."), 4);
    }
    return 0;
}
